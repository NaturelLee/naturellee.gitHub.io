(window.webpackJsonp=window.webpackJsonp||[]).push([[8],{194:function(a,t,v){a.exports=v.p+"assets/img/complexity.31f735f2.png"},235:function(a,t,v){"use strict";v.r(t);var _=v(0),r=Object(_.a)({},(function(){var a=this,t=a.$createElement,_=a._self._c||t;return _("ContentSlotsDistributor",{attrs:{"slot-key":a.$parent.slotKey}},[_("h1",{attrs:{id:"数据结构和算法"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#数据结构和算法"}},[a._v("#")]),a._v(" 数据结构和算法")]),a._v(" "),_("h2",{attrs:{id:"复杂度分析"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#复杂度分析"}},[a._v("#")]),a._v(" 复杂度分析")]),a._v(" "),_("h3",{attrs:{id:"一、什么是复杂度分析"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#一、什么是复杂度分析"}},[a._v("#")]),a._v(" 一、什么是复杂度分析？")]),a._v(" "),_("ol",[_("li",[a._v("数据结构和算法解决是“如何让计算机更快时间、更省空间的解决问题”。")]),a._v(" "),_("li",[a._v("因此需从执行时间和占用空间两个维度来评估数据结构和算法的性能。")]),a._v(" "),_("li",[a._v("分别用时间复杂度和空间复杂度两个概念来描述性能问题，二者统称为复杂度。")]),a._v(" "),_("li",[a._v("复杂度描述的是算法执行时间（或占用空间）与数据规模的增长关系。")])]),a._v(" "),_("h4",{attrs:{id:"二、为什么要进行复杂度分析"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#二、为什么要进行复杂度分析"}},[a._v("#")]),a._v(" 二、为什么要进行复杂度分析？")]),a._v(" "),_("ol",[_("li",[a._v("和性能测试相比，复杂度分析有不依赖执行环境、成本低、效率高、易操作、指导性强的特点。")]),a._v(" "),_("li",[a._v("掌握复杂度分析，将能编写出性能更优的代码，有利于降低系统开发和维护成本。")])]),a._v(" "),_("h4",{attrs:{id:"三、如何进行复杂度分析"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#三、如何进行复杂度分析"}},[a._v("#")]),a._v(" 三、如何进行复杂度分析？")]),a._v(" "),_("ol",[_("li",[_("p",[a._v("大O表示法")]),a._v(" "),_("ol",[_("li",[a._v("来源\n算法的执行时间与每行代码的执行次数成正比，用T(n) = O(f(n))表示，其中T(n)表示算法执行总时间，f(n)表示每行代码执行总次数，而n往往表示数据的规模。")]),a._v(" "),_("li",[a._v("特点\n以时间复杂度为例，由于时间复杂度描述的是算法执行时间与数据规模的增长变化趋势，所以常量阶、低阶以及系数实际上对这种增长趋势不产决定性影响，所以在做时间复杂度分析时忽略这些项。")])])]),a._v(" "),_("li",[_("p",[a._v("复杂度分析法则")]),a._v(" "),_("ol",[_("li",[a._v("单段代码看高频：比如循环。")]),a._v(" "),_("li",[a._v("多段代码取最大：比如一段代码中有单循环和多重循环，那么取多重循环的复杂度。")]),a._v(" "),_("li",[a._v("嵌套代码求乘积：比如递归、多重循环等")]),a._v(" "),_("li",[a._v("多个规模求加法：比如方法有两个参数控制两个循环的次数，那么这时就取二者复杂度相加。")])])])]),a._v(" "),_("h4",{attrs:{id:"四、常用的复杂度级别"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#四、常用的复杂度级别"}},[a._v("#")]),a._v(" 四、常用的复杂度级别？")]),a._v(" "),_("ol",[_("li",[a._v("多项式阶：随着数据规模的增长，算法的执行时间和空间占用，按照多项式的比例增长。包括，\nO(1)（常数阶）、O(logn)（对数阶）、O(n)（线性阶）、O(nlogn)（线性对数阶）、O(n^2)（平方阶）、O(n^3)（立方阶）")]),a._v(" "),_("li",[a._v("非多项式阶：随着数据规模的增长，算法的执行时间和空间占用暴增，这类算法性能极差。包括，\nO(2^n)（指数阶）、O(n!)（阶乘阶）")])]),a._v(" "),_("h3",{attrs:{id:"时间复杂度分析"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#时间复杂度分析"}},[a._v("#")]),a._v(" 时间复杂度分析")]),a._v(" "),_("p",[a._v("全称是渐进时间复杂度（asymptotic time complexity），表示算法的"),_("strong",[a._v("执行时间")]),a._v("与数据规模之间的增长关系。")]),a._v(" "),_("div",{staticClass:"language- extra-class"},[_("pre",[_("code",[a._v("1. 只关注循环执行次数最多的一段代码\n2. 加法法则：总复杂度等于量级最大的那段代码的复杂度\n3. 乘法法则：嵌套代码的复杂度等于嵌套内外代码复杂度的乘积 --- 嵌套循环\n")])])]),_("p",[_("img",{attrs:{src:v(194),alt:"complexity"}})]),a._v(" "),_("ol",[_("li",[a._v("常量阶O(1)： 一般情况下，只要算法中不存在循环语句、递归语句，即使有成千上万行的代码，其时间复杂度也是Ο(1)。")]),a._v(" "),_("li",[a._v("对数阶O(log n)：")]),a._v(" "),_("li",[a._v("线性阶O(n)：")]),a._v(" "),_("li",[a._v("O(m + n), O(m * n)：")]),a._v(" "),_("li",[a._v("线性对数阶O(n log n)：")]),a._v(" "),_("li",[a._v("平方阶O(n^2)、立方阶O(n^3)、...k次方阶O(n^k)：")]),a._v(" "),_("li",[a._v("指数阶O(2^n)：")]),a._v(" "),_("li",[a._v("阶乘阶O(n!)：")])]),a._v(" "),_("h3",{attrs:{id:"空间复杂度分析"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#空间复杂度分析"}},[a._v("#")]),a._v(" 空间复杂度分析")]),a._v(" "),_("p",[a._v("全称就是渐进空间复杂度（asymptotic space complexity），表示算法的"),_("strong",[a._v("存储空间")]),a._v("与数据规模之间的增长关系。")]),a._v(" "),_("h3",{attrs:{id:"四个方面"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#四个方面"}},[a._v("#")]),a._v(" 四个方面：")]),a._v(" "),_("ol",[_("li",[a._v("最好情况时间复杂度（best case time complexity）")]),a._v(" "),_("li",[a._v("最坏情况时间复杂度（worst case time complexity）")]),a._v(" "),_("li",[a._v("平均情况时间复杂度（average case time complexity）：加权平均")]),a._v(" "),_("li",[a._v("均摊时间复杂度（amortized time complexity）, 摊还分析")])]),a._v(" "),_("h2",{attrs:{id:"_20个最常用、最基础的数据结构和算法"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#_20个最常用、最基础的数据结构和算法"}},[a._v("#")]),a._v(" 20个最常用、最基础的数据结构和算法")]),a._v(" "),_("ol",[_("li",[a._v("10 个数据结构：数组、链表、栈、队列、散列表、二叉树、堆、跳表、图、Trie 树；")]),a._v(" "),_("li",[a._v("10 个算法：递归、排序、二分查找、搜索、哈希算法、贪心算法、分治算法、回溯算法、动态规划、字符串匹配算法。")])]),a._v(" "),_("h2",{attrs:{id:"学习技巧"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#学习技巧"}},[a._v("#")]),a._v(" 学习技巧")]),a._v(" "),_("p",[a._v("要学习它的“来历”“自身的特点”“适合解决的问题”以及“实际的应用场景”。")]),a._v(" "),_("ol",[_("li",[a._v("边学边练，适度刷题")])]),a._v(" "),_("h2",{attrs:{id:"基础篇"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#基础篇"}},[a._v("#")]),a._v(" 基础篇")]),a._v(" "),_("h3",{attrs:{id:"数组"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#数组"}},[a._v("#")]),a._v(" 数组")]),a._v(" "),_("ol",[_("li",[a._v("数组（Array）是一种线性表数据结构。它用一组连续的内存空间，来存储一组具有相同类型的数据。")]),a._v(" "),_("li",[a._v("数组支持随机访问，根据下标随机访问的时间复杂度为 O(1)。")])]),a._v(" "),_("h4",{attrs:{id:"低效的-插入-和-删除"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#低效的-插入-和-删除"}},[a._v("#")]),a._v(" 低效的“插入”和“删除”")]),a._v(" "),_("ol",[_("li",[a._v("插入、删除操作比较低效，平均情况时间复杂度为 O(n)。")])]),a._v(" "),_("h3",{attrs:{id:"链表"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#链表"}},[a._v("#")]),a._v(" 链表")]),a._v(" "),_("h4",{attrs:{id:"缓存淘汰策略"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#缓存淘汰策略"}},[a._v("#")]),a._v(" 缓存淘汰策略")]),a._v(" "),_("ol",[_("li",[a._v("先进先出策略 FIFO（First In，First Out）")]),a._v(" "),_("li",[a._v("最少使用策略 LFU（Least Frequently Used）")]),a._v(" "),_("li",[a._v("最近最少使用策略 LRU（Least Recently Used）。")])]),a._v(" "),_("h4",{attrs:{id:"表结构"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#表结构"}},[a._v("#")]),a._v(" 表结构")]),a._v(" "),_("ol",[_("li",[a._v("单链表、双向链表和循环链表。")]),a._v(" "),_("li",[a._v("单链表随机访问的性能没有数组好，需要 O(n) 的时间复杂度。")]),a._v(" "),_("li",[a._v("单链表的尾结点指针指向空地址，表示这就是最后的结点了。而循环链表的尾结点指针是指向链表的头结点")]),a._v(" "),_("li",[a._v("双向链表支持两个方向，每个结点不止有一个后继指针 next 指向后面的结点，还有一个前驱指针 prev 指向前面的结点。")]),a._v(" "),_("li",[a._v("写链表代码技巧\n"),_("ol",[_("li",[a._v("理解指针或引用的含义：指针中存储了这个变量的内存地址")]),a._v(" "),_("li",[a._v("警惕指针丢失和内存泄漏")]),a._v(" "),_("li",[a._v("利用哨兵简化实现难度")]),a._v(" "),_("li",[a._v("重点留意边界条件处理")]),a._v(" "),_("li",[a._v("举例画图，辅助思考")]),a._v(" "),_("li",[a._v("多写多练，没有捷径")])])]),a._v(" "),_("li",[a._v("5 个常见的链表操作\n"),_("ol",[_("li",[a._v("单链表反转")]),a._v(" "),_("li",[a._v("链表中环的检测")]),a._v(" "),_("li",[a._v("两个有序的链表合并")]),a._v(" "),_("li",[a._v("删除链表倒数第 n 个结点")]),a._v(" "),_("li",[a._v("求链表的中间结点")])])])]),a._v(" "),_("h3",{attrs:{id:"栈"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#栈"}},[a._v("#")]),a._v(" 栈")]),a._v(" "),_("h4",{attrs:{id:"what"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#what"}},[a._v("#")]),a._v(" What")]),a._v(" "),_("ol",[_("li",[a._v("栈是一种“操作受限”的线性表")]),a._v(" "),_("li",[a._v("特定的数据结构是对特定场景的抽象")])]),a._v(" "),_("h4",{attrs:{id:"how"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#how"}},[a._v("#")]),a._v(" How")]),a._v(" "),_("ol",[_("li",[a._v("用数组实现的栈，我们叫作顺序栈，用链表实现的栈，我们叫作链式栈。")])]),a._v(" "),_("h4",{attrs:{id:"when"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#when"}},[a._v("#")]),a._v(" When")]),a._v(" "),_("ol",[_("li",[a._v("函数调用栈")]),a._v(" "),_("li",[a._v("表达式求值")]),a._v(" "),_("li",[a._v("括号匹配")])]),a._v(" "),_("h3",{attrs:{id:"队列"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#队列"}},[a._v("#")]),a._v(" 队列")]),a._v(" "),_("ol",[_("li",[a._v("队列是一种先进先出的数据结构：操作：入队(enqueue)和出队(dequeue)")]),a._v(" "),_("li",[a._v("也是一种操作受限的线性表数据结构。")]),a._v(" "),_("li",[a._v("用数组实现的队列叫作顺序队列，用链表实现的队列叫作链式队列。")]),a._v(" "),_("li",[a._v("队列需要两个指针：一个是 head 指针，指向队头；一个是 tail 指针，指向队尾。")]),a._v(" "),_("li",[a._v("循环队列： 最关键的是，确定好队空和队满的判定条件。")]),a._v(" "),_("li",[a._v("阻塞队列和并发队列")])]),a._v(" "),_("h3",{attrs:{id:"递归"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#递归"}},[a._v("#")]),a._v(" 递归")]),a._v(" "),_("ol",[_("li",[a._v("递归是一种应用非常广泛的算法（或者编程技巧")]),a._v(" "),_("li",[a._v("递归需要满足的三个条件\n"),_("ol",[_("li",[a._v("一个问题的解可以分解为几个子问题的解")]),a._v(" "),_("li",[a._v("这个问题与分解之后的子问题，除了数据规模不同，求解思路完全一样")]),a._v(" "),_("li",[a._v("存在递归终止条件")])])]),a._v(" "),_("li",[a._v("如何编写递归代码？写递归代码最关键的是写出递推公式，找到终止条件")]),a._v(" "),_("li",[a._v("递归代码要警惕堆栈溢出")]),a._v(" "),_("li",[a._v("递归代码要警惕重复计算")])]),a._v(" "),_("h3",{attrs:{id:"排序"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#排序"}},[a._v("#")]),a._v(" 排序")]),a._v(" "),_("h4",{attrs:{id:"分类"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#分类"}},[a._v("#")]),a._v(" 分类")]),a._v(" "),_("ol",[_("li",[a._v("冒泡、插入、选择 => 比较、交换")]),a._v(" "),_("li",[a._v("快排、归并 => 分治思想")]),a._v(" "),_("li",[a._v("桶、计数、基数 => 线性排序，不基于比较，时间复杂度O(n)")])]),a._v(" "),_("h4",{attrs:{id:"如何分析一个排序算法"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#如何分析一个排序算法"}},[a._v("#")]),a._v(" 如何分析一个排序算法")]),a._v(" "),_("h5",{attrs:{id:"排序算法的执行效率"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#排序算法的执行效率"}},[a._v("#")]),a._v(" 排序算法的执行效率")]),a._v(" "),_("ol",[_("li",[a._v("最好情况、最坏情况、平均情况时间复杂度")]),a._v(" "),_("li",[a._v("时间复杂度的系数、常数 、低阶")]),a._v(" "),_("li",[a._v("比较次数和交换（或移动）次数")])]),a._v(" "),_("h5",{attrs:{id:"排序算法的内存消耗"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#排序算法的内存消耗"}},[a._v("#")]),a._v(" 排序算法的内存消耗")]),a._v(" "),_("ol",[_("li",[a._v("原地排序算法，就是特指空间复杂度是 O(1) 的排序算法。")])]),a._v(" "),_("h5",{attrs:{id:"排序算法的稳定性"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#排序算法的稳定性"}},[a._v("#")]),a._v(" 排序算法的稳定性")]),a._v(" "),_("ol",[_("li",[a._v("如果待排序的序列中存在值相等的元素，经过排序之后，相等元素之间原有的先后顺序不变。")])]),a._v(" "),_("h4",{attrs:{id:"冒泡排序-bubble-sort"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#冒泡排序-bubble-sort"}},[a._v("#")]),a._v(" 冒泡排序（Bubble Sort）")]),a._v(" "),_("ol",[_("li",[a._v("冒泡排序是原地排序算法吗？需要常量级的临时空间，所以是原地排序算法。")]),a._v(" "),_("li",[a._v("冒泡排序是稳定的排序算法吗？相邻的两个元素大小相等的时候，我们不做交换，是。")]),a._v(" "),_("li",[a._v("时间复杂度\n"),_("ol",[_("li",[a._v("最好情况：O(n)")]),a._v(" "),_("li",[a._v("最坏情况：O(n^2)")]),a._v(" "),_("li",[a._v("平均情况：O(n^2)")])])]),a._v(" "),_("li",[a._v("有序度是数组中具有有序关系的元素对的个数")]),a._v(" "),_("li",[a._v("逆序度 = 满有序度 - 有序度")])]),a._v(" "),_("h4",{attrs:{id:"插入排序-insertion-sort"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#插入排序-insertion-sort"}},[a._v("#")]),a._v(" 插入排序（Insertion Sort）")]),a._v(" "),_("ol",[_("li",[a._v("核心思想是取未排序区间中的元素，在已排序区间中找到合适的插入位置将其插入，并保证已排序区间数据一直有序")]),a._v(" "),_("li",[a._v("不需要额外的存储空间, 是一个原地排序算法")]),a._v(" "),_("li",[a._v("稳定的排序算法")]),a._v(" "),_("li",[a._v("时间复杂度\n"),_("ol",[_("li",[a._v("最好为 O(n)")]),a._v(" "),_("li",[a._v("最坏为 O(n^2)")]),a._v(" "),_("li",[a._v("平均为 O(n^2)")])])])]),a._v(" "),_("h4",{attrs:{id:"选择排序-selection-sort"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#选择排序-selection-sort"}},[a._v("#")]),a._v(" 选择排序（Selection Sort）")]),a._v(" "),_("ol",[_("li",[a._v("选择排序每次会从未排序区间中找到最小的元素，将其放到已排序区间的末尾。")]),a._v(" "),_("li",[a._v("是一个原地排序算法")]),a._v(" "),_("li",[a._v("不稳定的排序算法")]),a._v(" "),_("li",[a._v("时间复杂度\n"),_("ol",[_("li",[a._v("最好为 O(n^2)")]),a._v(" "),_("li",[a._v("最坏为 O(n^2)")]),a._v(" "),_("li",[a._v("平均为 O(n^2)")])])])]),a._v(" "),_("h4",{attrs:{id:"归并排序-merge-sort"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#归并排序-merge-sort"}},[a._v("#")]),a._v(" 归并排序（Merge Sort）")]),a._v(" "),_("ol",[_("li",[a._v("排序数组，先把数组从中间分成前后两部分，然后对前后两部分分别排序，再将排好序的两部分合并在一起")]),a._v(" "),_("li",[a._v("归并排序是一个稳定的排序算法。")]),a._v(" "),_("li",[a._v("归并排序不是原地排序算法。")]),a._v(" "),_("li",[a._v("不管是最好情况、最坏情况，还是平均情况，时间复杂度都是 O(nlogn)")]),a._v(" "),_("li",[a._v("空间复杂度是 O(n)")])]),a._v(" "),_("h4",{attrs:{id:"快速排序-quick-sort"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#快速排序-quick-sort"}},[a._v("#")]),a._v(" 快速排序（Quick Sort）")]),a._v(" "),_("ol",[_("li",[a._v("要排序数组中下标从 p 到 r 之间的一组数据，我们选择 p 到 r 之间的任意一个数据作为 pivot（分区点）")]),a._v(" "),_("li",[a._v("遍历 p 到 r 之间的数据，将小于 pivot 的放到左边，将大于 pivot 的放到右边，将 pivot 放到中间")]),a._v(" "),_("li",[a._v("快排是一种原地、不稳定的排序算法。")]),a._v(" "),_("li",[a._v("时间复杂度也是 O(nlogn)。")]),a._v(" "),_("li",[a._v("最坏情况下的时间复杂度是 O(n2)")])]),a._v(" "),_("h4",{attrs:{id:"桶排序-bucket-sort"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#桶排序-bucket-sort"}},[a._v("#")]),a._v(" 桶排序（Bucket sort）")]),a._v(" "),_("ol",[_("li",[a._v("核心思想是将要排序的数据分到几个有序的桶里，每个桶里的数据再单独进行排序。桶内排完序之后，再把每个桶里的数据按照顺序依次取出，组成的序列就是有序的了。")])]),a._v(" "),_("h4",{attrs:{id:"计数排序-counting-sort"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#计数排序-counting-sort"}},[a._v("#")]),a._v(" 计数排序（Counting sort）")]),a._v(" "),_("ol",[_("li",[a._v("计数排序其实是桶排序的一种特殊情况。当要排序的 n 个数据，所处的范围并不大的时候，比如最大值是 k，我们就可以把数据划分成 k 个桶。")]),a._v(" "),_("li",[a._v("计数排序只能用在数据范围不大的场景中，如果数据范围 k 比要排序的数据 n 大很多，就不适合用计数排序了。而且，计数排序只能给非负整数排序，如果要排序的数据是其他类型的，要将其在不改变相对大小的情况下，转化为非负整数。")])]),a._v(" "),_("h4",{attrs:{id:"基数排序-radix-sort"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#基数排序-radix-sort"}},[a._v("#")]),a._v(" 基数排序（Radix sort）")]),a._v(" "),_("p",[a._v("基数排序对要排序的数据是有要求的，需要可以分割出独立的“位”来比较，而且位之间有递进的关系，如果 a 数据的高位比 b 数据大，那剩下的低位就不用比较了。除此之外，每一位的数据范围不能太大，要可以用线性排序算法来排序，否则，基数排序的时间复杂度就无法做到 O(n) 了。")]),a._v(" "),_("h3",{attrs:{id:"二分查找"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#二分查找"}},[a._v("#")]),a._v(" 二分查找")]),a._v(" "),_("h3",{attrs:{id:"跳表"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#跳表"}},[a._v("#")]),a._v(" 跳表")]),a._v(" "),_("h3",{attrs:{id:"散列表"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#散列表"}},[a._v("#")]),a._v(" 散列表")]),a._v(" "),_("h3",{attrs:{id:"hash算法"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#hash算法"}},[a._v("#")]),a._v(" hash算法")]),a._v(" "),_("h3",{attrs:{id:"二叉树"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#二叉树"}},[a._v("#")]),a._v(" 二叉树")]),a._v(" "),_("h3",{attrs:{id:"红黑树"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#红黑树"}},[a._v("#")]),a._v(" 红黑树")]),a._v(" "),_("h3",{attrs:{id:"递归树"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#递归树"}},[a._v("#")]),a._v(" 递归树")]),a._v(" "),_("h3",{attrs:{id:"堆、堆排序"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#堆、堆排序"}},[a._v("#")]),a._v(" 堆、堆排序")]),a._v(" "),_("h3",{attrs:{id:"图"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#图"}},[a._v("#")]),a._v(" 图")]),a._v(" "),_("h3",{attrs:{id:"深度和广度优先搜索"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#深度和广度优先搜索"}},[a._v("#")]),a._v(" 深度和广度优先搜索")]),a._v(" "),_("h3",{attrs:{id:"字符串匹配"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#字符串匹配"}},[a._v("#")]),a._v(" 字符串匹配")]),a._v(" "),_("h3",{attrs:{id:"trie树"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#trie树"}},[a._v("#")]),a._v(" Trie树")]),a._v(" "),_("h3",{attrs:{id:"ac自动机"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#ac自动机"}},[a._v("#")]),a._v(" AC自动机")]),a._v(" "),_("h3",{attrs:{id:"贪心算法"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#贪心算法"}},[a._v("#")]),a._v(" 贪心算法")]),a._v(" "),_("h3",{attrs:{id:"分支算法"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#分支算法"}},[a._v("#")]),a._v(" 分支算法")]),a._v(" "),_("h3",{attrs:{id:"回溯算法"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#回溯算法"}},[a._v("#")]),a._v(" 回溯算法")]),a._v(" "),_("h3",{attrs:{id:"动态规划"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#动态规划"}},[a._v("#")]),a._v(" 动态规划")]),a._v(" "),_("h2",{attrs:{id:"高级篇"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#高级篇"}},[a._v("#")]),a._v(" 高级篇")]),a._v(" "),_("h3",{attrs:{id:"拓扑排序"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#拓扑排序"}},[a._v("#")]),a._v(" 拓扑排序")]),a._v(" "),_("h3",{attrs:{id:"最短路径"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#最短路径"}},[a._v("#")]),a._v(" 最短路径")]),a._v(" "),_("h3",{attrs:{id:"位图"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#位图"}},[a._v("#")]),a._v(" 位图")]),a._v(" "),_("h3",{attrs:{id:"概率统计"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#概率统计"}},[a._v("#")]),a._v(" 概率统计")]),a._v(" "),_("h3",{attrs:{id:"向量空间"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#向量空间"}},[a._v("#")]),a._v(" 向量空间")]),a._v(" "),_("h3",{attrs:{id:"b-树"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#b-树"}},[a._v("#")]),a._v(" B+树")]),a._v(" "),_("h3",{attrs:{id:"搜索"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#搜索"}},[a._v("#")]),a._v(" 搜索")]),a._v(" "),_("h3",{attrs:{id:"索引"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#索引"}},[a._v("#")]),a._v(" 索引")]),a._v(" "),_("h3",{attrs:{id:"并行算法"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#并行算法"}},[a._v("#")]),a._v(" 并行算法")])])}),[],!1,null,null,null);t.default=r.exports}}]);